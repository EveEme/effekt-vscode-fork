{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Effekt",
  "foldingStartMarker": "(?<![\"'])(/\\*\\*|\\{\\s*$)",
  "foldingStopMarker": "(?<![\"'])(\\*\\*/|^\\s*\\})",
  "patterns": [
    { "include": "#comments" },
    { "include": "#definitions" },
    { "include": "#keywords" },
    { "include": "#names" },
    { "include": "#literals" },
    { "include": "#holes" }
  ],
  "repository": {
    "comments": {
      "patterns": [{
        "begin": "//",
        "end": "\\n",
        "beginCaptures": {
          "0": { "name": "punctuation.definition.comment.effekt" }
        },
        "name": "comment.line.double-slash.effekt"
      }, {
        "begin": "/\\*",
        "beginCaptures": {
          "0": { "name": "punctuation.definition.comment.effekt" }
        },
        "end": "\\*/",
        "endCaptures": {
          "0": {
            "name": "punctuation.definition.comment.effekt"
          }
        },
        "name": "comment.block.effekt"
      }]
    },
    "definitions": {
      "patterns": [{
          "begin": "\\s*(extern)\\s+((?:(?:\\{[^\\}]*\\}|[a-zA-Z][a-z-A-Z0-9_$]*)\\s+)?)\\s*(def)\\s+([a-zA-Z][a-z-A-Z0-9_$]*)\\b",
          "end": "[=\\n]",
          "captures": {
              "1": { "name": "keyword.declaration.type" },
              "2": { "patterns": [{ "include": "#capabilities" }] },
              "3": { "name": "keyword.declaration.function.extern" },
              "4": { "name": "entity.name.function" }
            },
          "patterns": [{ "include": "#parameters" }]
        }, {
          "begin": "\\s*(def)\\s+([a-zA-Z][a-z-A-Z0-9_$]*)\\b",
          "end": "[=\\n]",
          "captures": {
            "1": { "name": "keyword.declaration.function" },
            "2": { "name": "entity.name.function" }
          },
          "patterns": [{ "include": "#parameters" }]
        }, {
          "match": "\\s*(val)\\s+([a-zA-Z][a-z-A-Z0-9_$]*)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.val" },
            "2": { "name": "variable" }
          }
        }, {
          "match": "\\s*(var)\\s+([a-zA-Z][a-z-A-Z0-9_$]*)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.var" },
            "2": { "name": "variable" }
          }
        }, {
          "match": "\\s*(extern)?\\s*(type|effect|interface|resource)\\s+([a-zA-Z][a-z-A-Z0-9_$]*)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.type" },
            "2": { "name": "keyword.declaration.type" },
            "3": { "name": "entity.name.type" }
          }
        }, {
          "match": "\\s*(namespace)\\s+([a-zA-Z][a-z-A-Z0-9_$]*)\\b",
          "captures": {
            "1": { "name": "keyword.declaration.namespace" },
            "2": { "name": "entity.name.namespace" }
          }
        }]
    },
    "parameters": {
      "patterns": [{
        "match": "\\b([a-z][a-zA-Z0-9_$]*)(?:)",
        "name": "variable.parameter"
      }, {
        "match": "\\b([A-Z][a-zA-Z0-9_$]*)(?:)",
        "name": "entity.name.type"
      }]
    },
    "capabilities": {
      "patterns": [{
        "match": "\\b(pure)\\b",
        "name": "keyword.other.capability"
      }, {
        "match": "\\b([a-z][a-zA-Z0-9_]*)\\b",
        "name": "variable.other.capability"
      }, {
        "match": ",",
        "name": "punctuation.capability-set.comma"
      }]
    },
    "keywords": {
      "patterns": [{
        "match": "\\b(module|import|def|fun|val|var|effect|type|match|case|record|extern|include|box|unbox|in|region|new|resource|interface|namespace|module|include|export|as)\\b",
        "name": "keyword.syntax"
      }, {
        "match": "\\b(resume|while|try|with|if|else|do|return|is|and)\\b",
        "name": "keyword.control"
      }]
    },
    "literals": {
      "patterns": [{
        "match": "\\b(true|false)\\b",
        "name": "constant.language.boolean.effekt"
      }, {
        "match": "\\b([0-9]+\\.[0-9]+)\\b",
        "name": "constant.numeric.float.effekt"
      }, {
        "match": "\\b([0-9]+)\\b",
        "name": "constant.numeric.integer.effekt"
      }, {
        "include": "#characters"
      }, {
        "include": "#strings"
      }]
    },
    "characters": {
      "name": "string.quoted.single.effekt",
      "begin": "'",
      "end": "'",
      "patterns": [{
        "name": "constant.character.escape.effekt",
        "match": "\\\\((u[0-9a-fA-F]{4})|.)"
      }]
    },
    "strings": {
      "patterns": [{
        "name": "string.quoted.triple.effekt",
        "begin": "\"\"\"",
        "end": "\"\"\"",
        "patterns": [{
          "name": "constant.character.escape.effekt",
          "match": "\\\\((u[0-9a-fA-F]{4})|.)"
        }, {
          "include": "#stringTemplates"
        }]
      }, {
        "name": "string.quoted.double.effekt",
        "begin": "\"",
        "end": "\"",
        "patterns": [{
          "name": "constant.character.escape.effekt",
          "match": "\\\\((u[0-9a-fA-F]{4})|.)"
        }, {
          "include": "#stringTemplates"
        }]
      }]
    },
    "names": {
      "patterns": [{
        "match": "\\b([a-z][a-zA-Z0-9_]*)\\b[\\s]*[({\\[]",
        "captures": {
          "1": { "name": "entity.name.function" }
        }
      }, {
        "match": "\\b[a-z][a-zA-Z0-9_]*\\b",
        "name": "variable"
      }, {
        "match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
        "name": "entity.name.type"
      }]
    },
    "stringTemplates": {
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.template-expression.begin.effekt" }
      },
      "end": "\\}",
      "endCaptures": {
        "0": { "name": "punctuation.definition.template-expression.end.effekt" }
      },
      "name": "meta.embedded.line.effekt",
      "patterns": [
        { "include": "$self" }
      ]
    },
    "punctuation": {
      "patterns": [{
        "match": "[{}\\(\\)\\[\\];,]",
        "name": "punctuation.separator"
      }]
    },
    "holes": {
      "begin": "<{",
      "end": "}>",
      "name": "meta.hole.effekt",
      "patterns": [{
        "include": "$self"
      }]
    }
  },
  "scopeName": "source.effekt"
}
